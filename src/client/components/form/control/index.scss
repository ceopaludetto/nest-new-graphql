@import "~@/client/styles/variables.scss";

.form-group {
  margin-bottom: get-theme-prop(layout, sizes, 6);
  .container {
    display: flex;
    align-items: center;
    position: relative;
    width: 100%;
    border-radius: get-theme-prop(layout, shape);
    transition: transition((background-color));
    background-color: get-color(background, darken-1);
    overflow: hidden;
    @each $k, $v in map-get($colors, light) {
      &.#{$k} {
        &:hover {
          background-color: get-color(background, darken-2);
        }
        &:focus-within {
          background-color: get-color(background, darken-1);
          .label {
            transform: translate3d(0, -130%, 0) scale(0.875);
            color: get-color($k);
          }
          .effect {
            &::before,
            &::after {
              width: 50%;
              opacity: 1;
            }
            &::after {
              left: 0;
            }
          }
        }
      }
    }
    .input {
      padding: get-theme-prop(layout, sizes, 8) get-theme-prop(layout, sizes, 4) get-theme-prop(layout, sizes, 4);
      color: get-color(background, contrast);
      flex: 1;
      border: none;
      background-color: transparent;
      line-height: get-theme-prop(layout, sizes, 5);
      font-size: get-theme-prop(typography, sizes, 2);
      width: 100%;
      &:not(:placeholder-shown):not(:focus) + .label {
        transform: translate3d(0, -130%, 0) scale(0.875);
      }
      &:focus {
        outline: none;
      }
    }
    .append {
      padding: 0 get-theme-prop(layout, sizes, 3);
    }
    .label {
      font-size: get-theme-prop(typography, sizes, 2);
      color: get-color(muted);
      font-weight: get-theme-prop(typography, weights, 2);
      left: get-theme-prop(layout, sizes, 4);
      transition: transition((transform, color));
      transform-origin: 0 0;
      top: 50%;
      transform: translate3d(0, -50%, 0) scale(1);
      display: inline-block;
      position: absolute;
      pointer-events: none;
      user-select: none;
      transform-style: preserve-3d;
      backface-visibility: hidden;
      perspective: 1000;
      &.error {
        color: get-color(error) !important;
      }
    }
    .effect {
      position: absolute;
      bottom: 0;
      left: 0;
      height: 2px;
      width: 100%;
      @each $k, $v in map-get($colors, light) {
        &.#{$k} {
          &::before,
          &::after {
            content: "";
            display: block;
            position: absolute;
            height: 100%;
            background-color: get-color($k);
            width: 0;
            opacity: 0;
            left: 50%;
            transition: transition((left, width, opacity, background-color));
          }
        }
      }
      &.error {
        &::before,
        &::after {
          background-color: get-color(error) !important;
        }
      }
    }
  }
  .helper {
    margin-top: get-theme-prop(layout, sizes, 3);
    transition: transition((color));
    padding-left: get-theme-prop(layout, sizes, 4);
    font-size: get-theme-prop(typography, sizes, 1);
    &.error {
      color: get-color(error) !important;
    }
  }
}
