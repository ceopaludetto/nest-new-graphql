@import "~@/client/styles/variables";

.form-group {
  margin-bottom: get-theme-prop(layout, gap) * 2;
  .container {
    align-items: center;
    background-color: get-shadow-color(text, 0.09);
    border-radius: get-theme-prop(layout, shape);
    display: flex;
    overflow: hidden;
    position: relative;
    transition: transition((background-color));
    width: 100%;
    @each $k, $v in map-get($colors, light) {
      &.#{$k} {
        &:hover {
          background-color: get-shadow-color(text, 0.13);
        }
        &:focus-within {
          background-color: get-shadow-color(text, 0.09);
          .input::placeholder {
            opacity: 1;
          }
          .label {
            color: get-color($k);
            transform: translate3d(0, -115%, 0) scale(0.875);
          }
          .effect {
            &::before {
              left: 0;
              opacity: 1;
              width: 100%;
            }
          }
        }
      }
    }
    .input {
      @extend %body-1;

      background-color: transparent;
      border: 0;
      color: get-color(background, contrast);
      flex: 1;
      padding: get-theme-prop(layout, sizes, 8) get-theme-prop(layout, sizes, 4) get-theme-prop(layout, sizes, 3);
      width: 100%;
      &:not(:placeholder-shown):not(:focus) + .label {
        transform: translate3d(0, -115%, 0) scale(0.875);
      }
      &:focus {
        outline: none;
      }
      &::placeholder {
        color: get-shadow-color(text, 0.6);
        opacity: 0;
        transition: transition((opacity));
        user-select: none;
      }
    }
    .append {
      padding: 0 get-theme-prop(layout, sizes, 4);
    }
    .label {
      color: get-shadow-color(text, 0.7);
      display: inline-block;
      font-weight: get-theme-prop(typography, weights, 2);
      left: get-theme-prop(layout, sizes, 4);
      pointer-events: none;
      position: absolute;
      top: 50%;
      transform: translate3d(0, -50%, 0) scale(1);
      transform-origin: 0 0;
      transform-style: preserve-3d;
      transition: transition((transform, color));
      user-select: none;
      &.error {
        color: get-color(error) !important;
      }
    }
    .effect {
      bottom: 0;
      height: 2px;
      left: 0;
      position: absolute;
      width: 100%;
      @each $k, $v in map-get($colors, light) {
        &.#{$k} {
          &::before {
            background-color: get-color($k);
            content: "";
            display: block;
            height: 100%;
            left: 50%;
            opacity: 0;
            position: absolute;
            transition: transition((left, width, opacity, background-color));
            width: 0;
          }
        }
      }
      &.error {
        &::before {
          background-color: get-color(error) !important;
        }
      }
    }
  }
  .helper {
    display: inline-block;
    margin-top: get-theme-prop(layout, sizes, 3);
    padding-left: get-theme-prop(layout, sizes, 4);
    transition: transition((color));
    &.error {
      color: get-color(error) !important;
    }
  }
}
