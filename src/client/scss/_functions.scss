@import "./variables";
@import "~csstyle/csstyle";

@function color-yiq($color, $if-true, $if-false) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

  @if ($yiq >= 150) {
    @return $if-true;
  } @else {
    @return $if-false;
  }
}

@mixin generate-theme-definition() {
  @each $theme, $values in $colors {
    [data-theme="#{$theme}"]:root {
      @each $k, $v in $values {
        --#{$k}: #{$v};
        --#{$k}-hover: #{darken($v, 2.5%)};
        --#{$k}-active: #{darken($v, 5%)};
        --#{$k}-contrast: #{color-yiq($v, #000000, #ffffff)};
        @for $i from 1 through 4 {
          --#{$k}-shadow-#{$i}: #{rgba($v, $i / 10)};
        }
      }
      // --paper-shadow: #{map-get($paper-shadow, $theme)};
    }
    @media (prefers-color-scheme: #{$theme}) {
      :root {
        @each $k, $v in $values {
          --#{$k}: #{$v};
          --#{$k}-hover: #{darken($v, 2.5%)};
          --#{$k}-active: #{darken($v, 5%)};
          --#{$k}-contrast: #{color-yiq($v, #000000, #ffffff)};
          @for $i from 1 through 4 {
            --#{$k}-shadow-#{$i}: #{rgba($v, $i / 10)};
          }
        }
        // --paper-shadow: #{map-get($paper-shadow, $theme)};
      }
    }
  }
}

@function get-theme-color($color, $type: "") {
  @if $type == "" {
    @return var(--#{$color});
  } @else {
    @return var(--#{$color}-#{$type});
  }
}

@function get-font-weight($weight: "regular") {
  @return map-get($font-weights, $weight);
}

@function get-breakpoint($bk) {
  @return map-get($breakpoints, $bk);
}

@function create-transition($props, $dur: 125ms, $fn: ease-in-out, $delay: 0ms) {
  $res: unquote("");
  @for $i from 1 through length($props) {
    $res: unquote(
      "#{$res} #{nth($props, $i)} #{if(type-of($dur) == 'list', nth($dur, $i), $dur)} #{if(type-of($fn) == 'list', nth($fn, $i), $fn)} #{if(type-of($delay) == 'list', nth($delay, $i), $delay)},"
    );
  }

  @return $res;
}
