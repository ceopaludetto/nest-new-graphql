@import "~@/client/styles/variables";

$justify: flex-start flex-end center space-between space-around;
$align: flex-start flex-end center baseline stretch;

.row {
  display: flex;
  flex-wrap: wrap;
  margin: 0 -#{get-theme-prop(layout, gap)};
  @each $k, $v in get-theme-prop(layout, breakpoints) {
    @media (min-width: $v) {
      @for $i from 1 through length($justify) {
        &.justify-content-#{$k}-#{nth($justify, $i)} {
          justify-content: nth($justify, $i);
        }
      }
      @for $i from 1 through length($align) {
        &.align-items-#{$k}-#{nth($align, $i)} {
          align-items: nth($align, $i);
        }
      }
    }
  }
}

.col {
  padding: 0 #{get-theme-prop(layout, gap)};
  @each $k, $v in get-theme-prop(layout, breakpoints) {
    @media (min-width: $v) {
      &.#{$k} {
        flex: 1;
      }
      @for $i from 1 through get-theme-prop(layout, base) {
        &.#{$k}-#{$i} {
          flex: 0 0 #{100% / get-theme-prop(layout, base) * $i};
        }
      }
    }
  }
}

.grid-template {
  grid-template-columns: repeat(get-theme-prop(layout, base), minmax(0, 1fr));
  column-gap: #{get-theme-prop(layout, gap) * 2};
  @each $k, $v in get-theme-prop(layout, breakpoints) {
    @media (min-width: $v) {
      @for $i from 1 through get-theme-prop(layout, base) {
        & .#{$k}-#{$i} {
          grid-column: span #{$i};
        }
      }
    }
  }
}

@for $i from 1 through 20 {
  .mw-#{$i * 50} {
    max-width: #{$i * 50}px;
  }
}

@for $i from 1 through 4 {
  .w-#{$i * 25} {
    width: #{$i * 25%};
  }
  .h-#{$i * 25} {
    height: #{$i * 25%};
  }
}

$sides: (
  l: left,
  r: right,
  t: top,
  b: bottom,
  x: left right,
  y: top bottom,
);

$props: (
  m: margin,
  p: padding,
);

@each $bk, $bv in get-theme-prop(layout, breakpoints) {
  @media (min-width: $bv) {
    @each $pk, $pv in $props {
      .#{$pk}-#{$bk}-0 {
        #{$pv}: 0;
      }
      @each $k, $v in $sides {
        @if type-of($v) == list {
          .#{$pk}#{$k}-#{$bk}-0 {
            @for $j from 1 through length($v) {
              #{$pv}-#{nth($v, $j)}: 0;
            }
          }
        } @else {
          .#{$pk}#{$k}-#{$bk}-0 {
            #{$pv}-#{$v}: 0;
          }
        }
      }
    }
    @for $i from 1 through length(get-theme-prop(layout, sizes)) {
      @each $pk, $pv in $props {
        .#{$pk}-#{$bk}-#{$i} {
          #{$pv}: get-theme-prop(layout, sizes, $i);
        }
        .-#{$pk}-#{$bk}-#{$i} {
          #{$pv}: -#{get-theme-prop(layout, sizes, $i)};
        }
        @each $k, $v in $sides {
          @if type-of($v) == list {
            .#{$pk}#{$k}-#{$bk}-#{$i} {
              @for $j from 1 through length($v) {
                #{$pv}-#{nth($v, $j)}: get-theme-prop(layout, sizes, $i);
              }
            }
            .-#{$pk}#{$k}-#{$bk}-#{$i} {
              @for $j from 1 through length($v) {
                #{$pv}-#{nth($v, $j)}: -#{get-theme-prop(layout, sizes, $i)};
              }
            }
          } @else {
            .#{$pk}#{$k}-#{$bk}-#{$i} {
              #{$pv}-#{$v}: get-theme-prop(layout, sizes, $i);
            }
            .-#{$pk}#{$k}-#{$bk}-#{$i} {
              #{$pv}-#{$v}: -#{get-theme-prop(layout, sizes, $i)};
            }
          }
        }
      }
    }
  }
}

$displays: flex, inline-flex, block, inline-block, grid;

@for $i from 1 through length($displays) {
  .#{nth($displays, $i)} {
    display: #{nth($displays, $i)};
  }
}

@each $bk, $bv in get-theme-prop(layout, breakpoints) {
  @media (min-width: $bv) {
    @for $i from 1 through get-theme-prop(layout, base) {
      .order-#{$bk}-#{$i} {
        order: $i;
      }
    }
  }
}

$texts: left right center;

@each $bk, $bv in get-theme-prop(layout, breakpoints) {
  @media (min-width: $bv) {
    @for $i from 1 through length($texts) {
      .text-align-#{$bk}-#{nth($texts, $i)} {
        text-align: #{nth($texts, $i)};
      }
    }
  }
}
