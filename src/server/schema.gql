# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthenticationInput {
  login: String!
  password: String!
}

type Block {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  name: String
  number: Float!
  condominiumID: ID!
  condominium: Condominium!
  locals: [Local!]
}

type City {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  name: String!
  code: Float!
  slug: String!
  stateID: ID!
  state: State!
}

type Condominium {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  companyName: String!
  cnpj: String!
  character: String!
  people: [Person!]!
  blocks: [Block!]!
  locals: [Local!]!
}

input CondominiumInsertInput {
  companyName: String!
  cnpj: String!
  character: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Gender {
  M
  F
  N
}

type Local {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  name: String!
  description: String
  capacity: Float!
  image: String
  blockID: ID
  condominiumID: ID!
  block: Block
  condominium: Condominium!
}

type Mutation {
  login(input: AuthenticationInput!): User!
  register(input: UserInsertInput!): User!
  createCondominium(input: CondominiumInsertInput!): Int!
}

type Person {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  name: String!
  email: String!
  gender: Gender!
  user: User!
  condominiums: [Condominium!]!
}

input PersonInsertInput {
  name: String!
  email: String!
  gender: Gender!
}

type Query {
  showPeople(first: Int, skip: Int): [Person!]!
  findPersonByID(id: ID!): Person!
  showUsers(first: Int, skip: Int): [User!]!
  findUserByID(id: ID!): User!
  findUserByLogin(login: String!): User!
  profile: User!
  showCondominiums(first: Int, skip: Int): [Condominium!]!
  findCondominiumByID(id: ID!): Condominium!
  showStates(first: Int, skip: Int): [State!]!
  findStateByID(id: ID!): State!
  showCities(first: Int, skip: Int): [City!]!
  findCityByID(id: ID!): City!
  findCitiesByStateID(id: ID!): [City!]!
}

type State {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  name: String!
  initials: String!
  code: Float!
  cities: [City!]!
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  login: String!
  personID: ID!
  person: Person!
}

input UserInsertInput {
  login: String!
  password: String!
  person: PersonInsertInput!
}
